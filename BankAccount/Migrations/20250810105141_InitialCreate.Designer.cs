// <auto-generated />
using System;
using BankAccount.Persistence.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankAccount.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810105141_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankAccount.Features.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_date");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("integer")
                        .HasColumnName("currency_type");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("interest_rate");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_date");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("BankAccount.Features.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CounterpartyAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("counterparty_account_id");

                    b.Property<int>("Currency")
                        .HasColumnType("integer")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CounterpartyAccountId");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("BankAccount.Features.Models.Transaction", b =>
                {
                    b.HasOne("BankAccount.Features.Models.Account", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankAccount.Features.Models.Account", null)
                        .WithMany()
                        .HasForeignKey("CounterpartyAccountId");
                });

            modelBuilder.Entity("BankAccount.Features.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
